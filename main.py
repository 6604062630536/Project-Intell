import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error , r2_score
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential # type: ignore
from tensorflow.keras.layers import Dense , Input # type: ignore
from sklearn.preprocessing import  OneHotEncoder
from sklearn.preprocessing import StandardScaler
import requests 

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π
def home():

    st.title("Predict total game sales using Machine Learning")
    st.subheader("Purpose")
    purpose = '''There are many different types of games available worldwide, and the variety of games attracts a diverse group of customers. 
        While some games achieve high sales, others perform poorly. 
        Several factors contribute to this, such as the genre of the game, the player's country, the game's price, and the platform. 
        This model aims to :green[Predict the Global Sales of a game based on characteristics such as release year, genre, platform, publisher, etc.], providing valuable insights for game developers.'''
    st.write(purpose)

    st.subheader("Market Analysis & Trends:")
    market = '''
        ‚Ä¢ Identify best-selling genres and platforms over the years.

        ‚Ä¢ Analyze the impact of publishers on sales performance.

        ‚Ä¢ Track sales trends across regions (NA, EU, JP, Other).
        '''
    st.markdown(market)

    st.subheader("Predictive Analytics & Forecasting:")
    preanal = '''
        ‚Ä¢ Build models to predict future game sales based on historical data.

        ‚Ä¢ Identify factors influencing high sales: platform, genre, publisher.'''
    st.markdown(preanal)

    st.subheader("Business Strategy & Game Development:")
    strategy = '''
        ‚Ä¢ Help game developers understand what type of games sell best.

        ‚Ä¢ Guide marketing strategies by targeting specific regions with high demand.'''
    st.markdown(strategy)

    st.subheader("Comparative Analysis:")
    comparative = '''
        ‚Ä¢ Compare sales performance of different gaming platforms (PlayStation, Xbox, Wii).

        ‚Ä¢ Evaluate how different game publishers perform in various markets.'''
    st.markdown(comparative)

    st.subheader("Problem Type")
    problem_type = '''
        ‚Ä¢ **Regression Problem**: Predict the total sales (global or regional) of a game based on its attributes, using numerical values for sales predictions.'''
    st.markdown(problem_type)

    st.subheader("Data Used")
    data_used = '''
        The dataset contains various features related to video game sales and characteristics. The features include:

        - **Rank**: Ranking of overall sales.
        - **Name**: The game's name.
        - **Platform**: Platform of the game's release (e.g., PC, PS4).
        - **Year**: Year of the game's release.
        - **Genre**: Genre of the game (e.g., Action, Adventure, RPG).
        - **Publisher**: Publisher of the game.
        - **NA_Sales**: Sales in North America (in millions).
        - **EU_Sales**: Sales in Europe (in millions).
        - **JP_Sales**: Sales in Japan (in millions).
        - **Other_Sales**: Sales in the rest of the world (in millions).
        - **Global_Sales**: Total worldwide sales (in millions).
        '''
    st.markdown(data_used)

    st.subheader("Data Exploration") 
    st.write("The dataset come form :blue[https://www.kaggle.com/gregorut/videogamesales].")
    st.write("The dataset contains :green[16,598] rows and :green[11 columns.]")
    st.subheader("Missing Values")
    st.write("Year has :red[271] missing values. Publisher has :red[58] missing values.")
    st.subheader("Data Cleaning")
    st.write("The dataset has been cleaned and preprocessed to handle missing values and ensure data quality by"
    " :green[Interpolating missing values in the 'Year' column.]"
    " :red[Dropping rows with missing values in the 'Publisher' column.]")
    st.subheader("Using Models")
    st.write("Two models are used to predict the total sales of video games:")
    st.write("1. :green[Random Forest Regressor]: A machine learning model that uses an ensemble of decision trees to predict sales.")
    st.write("2. :green[Linear Regression]: A statistical model that predicts sales based on linear relationships between features.")
    st.write("The models are trained on the dataset and evaluated based on their performance metrics.")
    st.write("The model with the lowest Mean Absolute Error (MAE) and highest R¬≤ Score is considered the best model for predicting sales.")
    st.write("The model's performance is visualized using scatter plots to compare actual sales with predicted sales.")

    st.subheader("Random Forest Model Building")
    model_building = ''' # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df = pd.read_csv("vgsales.csv")

    # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df["Year"] = df["Year"].interpolate(method="linear")
    df.dropna(subset=["Publisher"], inplace=True)
    df["Year"] = df["Year"].astype(int)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Apply Filter
    if apply_filter:
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        filtered_df = df[df["Year"] == selected_year]
        if selected_genre != "All":
            filtered_df = filtered_df[filtered_df["Genre"] == selected_genre]
        if selected_platform != "All":
            filtered_df = filtered_df[filtered_df["Platform"] == selected_platform]

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á
        if filtered_df.empty:
            st.warning("‚ùå No data available for the selected filters.")
        else:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
            st.write(f"üìå Showing results for **Genre: {selected_genre}**, **Platform: {selected_platform}**, **Year: {selected_year}**")
            st.dataframe(filtered_df)

            # üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            filtered_df["Genre"] = filtered_df["Genre"].map({
                "Action": 1, "Adventure": 2, "Fighting": 3, "Misc": 4,
                "Platform": 5, "Puzzle": 6, "Racing": 7, "Role-Playing": 8,
                "Shooter": 9, "Simulation": 10, "Sports": 11, "Strategy": 12
            })

            filtered_df["Platform"] = filtered_df["Platform"].map({
                "2600": 1, "3DO": 2, "3DS": 3, "DC": 4, "DS": 5, "GB": 6,
                "GBA": 7, "GC": 8, "GEN": 9, "GG": 10, "N64": 11, "NES": 12,
                "NG": 13, "PC": 14, "PCFX": 15, "PS": 16, "PS2": 17, "PS3": 18,
                "PS4": 19, "PSP": 20, "PSV": 21, "SAT": 22, "SCD": 23, "SNES": 24,
                "TG16": 25, "WS": 26, "Wii": 27, "WiiU": 28, "X360": 29, "XB": 30, "XOne": 31
            })

            filtered_df["Publisher"] = filtered_df["Publisher"].astype("category").cat.codes

            # üîπ ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Features ‡πÅ‡∏•‡∏∞ Target
            X = filtered_df.drop(columns=["Name", "Global_Sales", "Rank"]) 
            y = filtered_df["Global_Sales"]

            # üîπ ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î Train ‡πÅ‡∏•‡∏∞ Test
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            # üîπ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏£‡∏Å - Random Forest
            rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
            rf_model.fit(X_train, y_train)

            # üîπ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤
            rf_y_pred = rf_model.predict(X_test)

            # üîπ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (Accuracy) ‡πÅ‡∏•‡∏∞ Loss
            rf_mae = mean_absolute_error(y_test, rf_y_pred)
            rf_r2 = r2_score(y_test, rf_y_pred)
            rf_loss = rf_mae / y_test.mean()  # Loss = MAE ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á

            # üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            st.subheader("üìä Random Forest Model Performance")
            st.write(f"‚úÖ **Mean Absolute Error (MAE):** {rf_mae:.2f}")
            st.write(f"‚úÖ **Model Accuracy (R¬≤ Score):** {rf_r2:.2f}")
            st.write(f"‚úÖ **Loss (MAE / Avg Sales):** {rf_loss:.4f}")

            # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Random Forest
            rf_result_df = pd.DataFrame({"Actual": y_test, "Predicted": rf_y_pred, "Game": filtered_df.loc[y_test.index, "Name"]})

            # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Random Forest
            rf_fig = px.scatter(rf_result_df, x="Actual", y="Predicted", title="Actual vs Predicted Global Sales - Random Forest",
                                labels={"Actual": "Actual Sales (millions)", "Predicted": "Predicted Sales (millions)", "Game": "Game Name"},
                                hover_data=["Game"],
                                template="plotly_dark")
            st.plotly_chart(rf_fig)'''
    st.code(model_building, language="python")

    st.subheader("Linear Regression Model Building")
    model_building = ''' # ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á - Linear Regression
            lr_model = LinearRegression()
            lr_model.fit(X_train, y_train)

            # üîπ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤
            lr_y_pred = lr_model.predict(X_test)

            # üîπ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (Accuracy) ‡πÅ‡∏•‡∏∞ Loss
            lr_mae = mean_absolute_error(y_test, lr_y_pred)
            lr_r2 = r2_score(y_test, lr_y_pred)
            lr_loss = lr_mae / y_test.mean()  # Loss = MAE ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á

            # üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            st.subheader("üìä Linear Regression Model Performance")
            st.write(f"‚úÖ **Mean Absolute Error (MAE):** {lr_mae:.2f}")
            st.write(f"‚úÖ **Model Accuracy (R¬≤ Score):** {lr_r2:.2f}")
            st.write(f"‚úÖ **Loss (MAE / Avg Sales):** {lr_loss:.4f}")

            # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Linear Regression
            lr_result_df = pd.DataFrame({"Actual": y_test, "Predicted": lr_y_pred, "Game": filtered_df.loc[y_test.index, "Name"]})

            # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Linear Regression
            lr_fig = px.scatter(lr_result_df, x="Actual", y="Predicted", title="Actual vs Predicted Global Sales - Linear Regression",
                                labels={"Actual": "Actual Sales (millions)", "Predicted": "Predicted Sales (millions)", "Game": "Game Name"},
                                hover_data=["Game"],
                                template="plotly_dark")
            st.plotly_chart(lr_fig)'''
    st.code(model_building, language="python")
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df = pd.read_csv("vgsales.csv")
    df["Year"] = df["Year"].interpolate(method="linear")
    df.dropna(subset=["Publisher"], inplace=True)

    NA = px.scatter(df, 
                    x="NA_Sales",  # 
                    y="Genre",  # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
                    title="Video Game Sales by Genre and Region",
                    color="Platform",  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Platform ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
                    size="Global_Sales",  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
                    hover_name="Name", 
                    hover_data=["Publisher", "Year"],  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡πâ‡πÄ‡∏°‡∏≤‡∏™‡πå
                    labels={"Global_Sales": "Sales (in millions)", "Genre": "Game Genre"},
                    template="plotly_dark")  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï Dark

    st.plotly_chart(NA)

    JP = px.scatter(df, 
                    x="JP_Sales",  # 
                    y="Genre",  # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
                    title="Video Game Sales by Genre and Region",
                    color="Platform",  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Platform ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
                    size="Global_Sales",  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
                    hover_name="Name", 
                    hover_data=["Publisher", "Year"],  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡πâ‡πÄ‡∏°‡∏≤‡∏™‡πå
                    labels={"Global_Sales": "Sales (in millions)", "Genre": "Game Genre"},
                    template="plotly_dark")  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï Dark

    st.plotly_chart(JP)

    EU = px.scatter(df, 
                    x="EU_Sales",  # 
                    y="Genre",  # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
                    title="Video Game Sales by Genre and Region",
                    color="Platform",  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Platform ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
                    size="Global_Sales",  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
                    hover_name="Name", 
                    hover_data=["Publisher", "Year"],  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡πâ‡πÄ‡∏°‡∏≤‡∏™‡πå
                    labels={"Global_Sales": "Sales (in millions)", "Genre": "Game Genre"},
                    template="plotly_dark")  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï Dark

    st.plotly_chart(EU)

    other = px.scatter(df, 
                    x="Other_Sales",  # 
                    y="Genre",  # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
                    title="Video Game Sales by Genre and Region",
                    color="Platform",  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Platform ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
                    size="Global_Sales",  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
                    hover_name="Name", 
                    hover_data=["Publisher", "Year"],  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡πâ‡πÄ‡∏°‡∏≤‡∏™‡πå
                    labels={"Global_Sales": "Sales (in millions)", "Genre": "Game Genre"},
                    template="plotly_dark")  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï Dark

    st.plotly_chart(other)

def vgsales():
    st.title("üéÆ Predict total game sales")

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df = pd.read_csv("vgsales.csv")

    # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df["Year"] = df["Year"].interpolate(method="linear")
    df.dropna(subset=["Publisher"], inplace=True)
    df["Year"] = df["Year"].astype(int)

    # **‡∏™‡∏£‡πâ‡∏≤‡∏á Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Genre ‡πÅ‡∏•‡∏∞ Platform**
    genre_options = df["Genre"].unique()
    platform_options = df["Platform"].unique()
    year_min = int(df["Year"].min())
    year_max = int(df["Year"].max())

    # Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Genre & Platform
    selected_genre = st.selectbox("üéÆ Select Genre", ["All"] + list(genre_options))
    selected_platform = st.selectbox("üïπ Select Platform", ["All"] + list(platform_options))

    # Slider ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Year
    selected_year = st.slider("üìÖ Select Year", min_value=year_min, max_value=year_max, value=year_max)
    st.write("if No data available for the selected filters, please try different filters.")
    # ‡∏õ‡∏∏‡πà‡∏° Apply Filter
    apply_filter = st.button("Apply Filter")

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Apply Filter
    if apply_filter:
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        filtered_df = df[df["Year"] == selected_year]
        if selected_genre != "All":
            filtered_df = filtered_df[filtered_df["Genre"] == selected_genre]
        if selected_platform != "All":
            filtered_df = filtered_df[filtered_df["Platform"] == selected_platform]

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á
        if filtered_df.empty:
            st.warning("‚ùå No data available for the selected filters.")
        else:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
            st.write(f"üìå Showing results for **Genre: {selected_genre}**, **Platform: {selected_platform}**, **Year: {selected_year}**")
            st.dataframe(filtered_df)

            # üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            filtered_df["Genre"] = filtered_df["Genre"].map({
                "Action": 1, "Adventure": 2, "Fighting": 3, "Misc": 4,
                "Platform": 5, "Puzzle": 6, "Racing": 7, "Role-Playing": 8,
                "Shooter": 9, "Simulation": 10, "Sports": 11, "Strategy": 12
            })

            filtered_df["Platform"] = filtered_df["Platform"].map({
                "2600": 1, "3DO": 2, "3DS": 3, "DC": 4, "DS": 5, "GB": 6,
                "GBA": 7, "GC": 8, "GEN": 9, "GG": 10, "N64": 11, "NES": 12,
                "NG": 13, "PC": 14, "PCFX": 15, "PS": 16, "PS2": 17, "PS3": 18,
                "PS4": 19, "PSP": 20, "PSV": 21, "SAT": 22, "SCD": 23, "SNES": 24,
                "TG16": 25, "WS": 26, "Wii": 27, "WiiU": 28, "X360": 29, "XB": 30, "XOne": 31
            })

            filtered_df["Publisher"] = filtered_df["Publisher"].astype("category").cat.codes

            # üîπ ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Features ‡πÅ‡∏•‡∏∞ Target
            X = filtered_df.drop(columns=["Name", "Global_Sales", "Rank"]) 
            y = filtered_df["Global_Sales"]

            # üîπ ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î Train ‡πÅ‡∏•‡∏∞ Test
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            # üîπ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏£‡∏Å - Random Forest
            rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
            rf_model.fit(X_train, y_train)

            # üîπ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤
            rf_y_pred = rf_model.predict(X_test)

            # üîπ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (Accuracy) ‡πÅ‡∏•‡∏∞ Loss
            rf_mae = mean_absolute_error(y_test, rf_y_pred)
            rf_r2 = r2_score(y_test, rf_y_pred)
            rf_loss = rf_mae / y_test.mean()  # Loss = MAE ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á

            # üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            st.subheader("üìä Random Forest Model Performance")
            st.write(f"‚úÖ **Mean Absolute Error (MAE):** {rf_mae:.2f}")
            st.write(f"‚úÖ **Model Accuracy (R¬≤ Score):** {rf_r2:.2f}")
            st.write(f"‚úÖ **Loss (MAE / Avg Sales):** {rf_loss:.4f}")

            # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Random Forest
            rf_result_df = pd.DataFrame({"Actual": y_test, "Predicted": rf_y_pred, "Game": filtered_df.loc[y_test.index, "Name"]})

            # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Random Forest
            rf_fig = px.scatter(rf_result_df, x="Actual", y="Predicted", title="Actual vs Predicted Global Sales - Random Forest",
                                labels={"Actual": "Actual Sales (millions)", "Predicted": "Predicted Sales (millions)", "Game": "Game Name"},
                                hover_data=["Game"],
                                template="plotly_dark")
            st.plotly_chart(rf_fig)

            # üîπ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á - Linear Regression
            lr_model = LinearRegression()
            lr_model.fit(X_train, y_train)

            # üîπ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤
            lr_y_pred = lr_model.predict(X_test)

            # üîπ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (Accuracy) ‡πÅ‡∏•‡∏∞ Loss
            lr_mae = mean_absolute_error(y_test, lr_y_pred)
            lr_r2 = r2_score(y_test, lr_y_pred)
            lr_loss = lr_mae / y_test.mean()  # Loss = MAE ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á

            # üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            st.subheader("üìä Linear Regression Model Performance")
            st.write(f"‚úÖ **Mean Absolute Error (MAE):** {lr_mae:.2f}")
            st.write(f"‚úÖ **Model Accuracy (R¬≤ Score):** {lr_r2:.2f}")
            st.write(f"‚úÖ **Loss (MAE / Avg Sales):** {lr_loss:.4f}")

            # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Linear Regression
            lr_result_df = pd.DataFrame({"Actual": y_test, "Predicted": lr_y_pred, "Game": filtered_df.loc[y_test.index, "Name"]})

            # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Linear Regression
            lr_fig = px.scatter(lr_result_df, x="Actual", y="Predicted", title="Actual vs Predicted Global Sales - Linear Regression",
                                labels={"Actual": "Actual Sales (millions)", "Predicted": "Predicted Sales (millions)", "Game": "Game Name"},
                                hover_data=["Game"],
                                template="plotly_dark")
            st.plotly_chart(lr_fig)

def pokedex():
    st.title("Predict Pokemon")
    st.subheader("Purpose")
    purpose = '''The purpose of this algorithm is to predict the outcome of a Pok√©mon battle based on various attributes of the Pok√©mon. It utilizes a machine learning model, specifically a Neural Network (Deep Learning), to learn the patterns and relationships in the battle data. This allows the model to predict which Pok√©mon is more likely to win based on their attributes, such as their statistics (HP, Attack, Defense, Speed, etc.) and type advantages.'''
    st.write(purpose)
    
    st.subheader("Problem Type")
    problem_type = '''
       Binary Classification Problem: The task is to predict which Pok√©mon is more likely to win in a battle based on their attributes.'''
    st.markdown(problem_type)

    st.subheader("Data Used")
    data_used = '''
        1.Pok√©mon images come from: :blue[https://pokeapi.co/.]\n
        2.:green[pokemon.csv] this datasets come from :blue[https://www.kaggle.com/datasets/abcsds/pokemon]\n
        This dataset contains :green[721 rows] and :green[9 columns] with various features related to Pok√©mon attributes and evolution. The features include:\n
        -**#** : A unique identifier for each Pok√©mon.\n
        -**Name** : The name of the Pok√©mon.\n
        -**Type 1** : The primary type of the Pok√©mon.\n
        -**Type 2** : The secondary type of the Pok√©mon.\n
        -**Total** : The total number of stats for the Pok√©mon.\n
        -**HP** : The hit points (HP) of the Pok√©mon.\n
        -**Attack** : The attack power of the Pok√©mon.\n
        -**Defense** : The defense power of the Pok√©mon.\n
        -**Sp. Atk** : The special attack power of the Pok√©mon.\n
        -**Sp. Def** : The special defense power of the Pok√©mon.\n
        -**Speed** : The speed of the Pok√©mon.\n
        -**Generation** : The generation in which the Pok√©mon was introduced.\n
        -**Legendary** : Indicates whether the Pok√©mon is legendary or not.\n
        3.:green[type_effectiveness.csv] The dataset comes from :blue[https://pokemondb.net/type]\n
        This dataset contains 3 features related to the strengths and weaknesses of each type:\n
        -**Attacking Type** : The type that is being attacked.\n
        -**Defending Type** : The type that is defending against the attack.\n
        -**Effectiveness** : The effectiveness of the attack on the defending type.\n
        4. :green[pokemon_battles_features.csv] This dataset was generated by a script (train.py) because the real win probability of each Pok√©mon pair cannot be directly obtained. The dataset was created under the following conditions:\n
         o	If Pok√©mon 1's total stats exceed Pok√©mon 2‚Äôs by more than 30%, Pok√©mon 1 is considered the winner, reflecting the fact that significant stat differences generally result in one Pok√©mon winning decisively.\n
         o	Speed Advantage: If one Pok√©mon has much higher speed, it will attack first.\n
         o	Type Effectiveness: The type advantage is calculated based on the effectiveness of one type against another.\n
         o	A sample of 60,000 pairs was randomly generated to ensure diversity and realism in the dataset.\n
           Features include:\n
         o	Total_p1: Total stats of Pok√©mon 1.\n
         o	Type1_p1: Primary type of Pok√©mon 1.\n
         o	Type2_p1: Secondary type of Pok√©mon 1.\n
         o	Speed_p1: Speed of Pok√©mon 1.\n
         o	Total_p2: Total stats of Pok√©mon 2.\n
         o	Type1_p2: Primary type of Pok√©mon 2.\n
         o	Type2_p2: Secondary type of Pok√©mon 2.\n
         o	Speed_p2: Speed of Pok√©mon 2.\n
         o	Winner: The winning Pok√©mon (1 for Pok√©mon 1, 0 for Pok√©mon 2).\n
         o	Win_Probability: The probability of Pok√©mon 1 winning the battle.\n
          '''
    st.markdown(data_used)
    st.subheader("Missing Values")
    st.markdown("There may be missing values in columns such as **Type 2**, which may not be applicable for all Pok√©mon.")
    st.subheader("Data Preparation")
    prepo = '''Before training the model, the relevant data needs to be prepared. The dataset used for training consists of information from Pok√©mon battle simulations, such as:\n
‚Ä¢	Numeric features: Total stats (Total_p1, Total_p2), Speed (Speed_p1, Speed_p2)\n
‚Ä¢	Categorical features: Types of the Pok√©mon (Type1_p1, Type2_p1, Type1_p2, Type2_p2)\n
Preprocessing:\n
‚Ä¢	One-hot Encoding is used to handle the categorical features like the Pok√©mon types. This technique converts each type into a binary vector that represents the presence or absence of that type. If a Pok√©mon has only one type, the missing secondary type is replaced with "Unknown.\n"
\n‚Ä¢	StandardScaler is applied to scale the numeric features so that all features have a similar scale, which improves the model's convergence during training.
'''
    st.markdown(prepo)
    st.subheader("Model Architerture")
    moar = '''A Neural Network (NN) is chosen for this task due to its capability to learn complex relationships between the features. The model consists of the following components:\n
‚Ä¢	Input Layer: Takes the input features, which include both numeric (Total, Speed) and encoded categorical data (Pok√©mon types).\n
‚Ä¢	Hidden Layers: The model contains three fully connected Dense layers with ReLU activation functions, which help in learning non-linear relationships between the input features and the target. The layers have 128, 64, and 32 units respectively. These layers are used to learn the underlying patterns in the data and the interactions between the different Pok√©mon attributes.\n
‚Ä¢	Dropout: While not explicitly stated in the provided code, Dropout is a regularization technique that can be added to reduce overfitting by randomly disabling some neurons during training. This helps the model generalize better to unseen data.\n
‚Ä¢	Output Layer: The model has a single unit in the output layer with a Sigmoid activation function, which produces a probability value between 0 and 1. This value represents the likelihood of Pok√©mon 1 winning the battle. If the output value is greater than 0.5, Pok√©mon 1 is predicted to win; otherwise, Pok√©mon 2 is predicted to win.\n
'''
    st.markdown(moar)
    st.subheader("Model Training")
    mt = '''The model is trained using a binary classification approach, where the goal is to predict the winner of the battle. The steps in training the model are as follows:\n
‚Ä¢	Loss Function: The model uses binary cross-entropy as the loss function, which is appropriate for binary classification problems. It measures the difference between the predicted probabilities and the actual outcomes (0 or 1).\n
‚Ä¢	Optimizer: The model uses the Adam optimizer, which is an efficient optimization algorithm that adapts the learning rate during training, helping the model converge faster.\n
‚Ä¢	Metrics: The accuracy of the model is tracked during training to evaluate its performance.\n
The training process involves splitting the dataset into a training set and a test set (80% for training and 20% for testing), scaling the features, and fitting the model to the training data. The model is then evaluated on the test set to determine its performance.\n
'''
    st.markdown(mt)
    st.subheader("Prediction")
    pdt = '''Once the model is trained, it can be used to predict the outcome of a Pok√©mon battle. Given two Pok√©mon, the following steps occur during prediction:\n
1.	Input Features: The input consists of the Pok√©mon‚Äôs stats (Total and Speed) and types. The types are encoded using the one-hot encoder, and the numeric features are scaled using the trained scaler.\n
2.	Model Prediction: The processed input features are passed through the trained neural network to get the predicted probability of Pok√©mon 1 winning.\n
3.	Winner Determination: If the predicted probability is greater than 0.5, Pok√©mon 1 is predicted to win; otherwise, Pok√©mon 2 is predicted to win.'''
    st.markdown(pdt)

    st.subheader("Model Evaluation")
    eva = '''The model's performance is evaluated using the following metrics:\n
    ‚Ä¢	Accuracy: The percentage of correct predictions (how often the model predicts the correct winner).\n
    ‚Ä¢	Loss: The binary cross-entropy loss, which gives an indication of how well the model is fitting the data.\n
    Both metrics are displayed in the user interface, allowing users to assess the model‚Äôs performance.'''
# ------------------------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ------------------------------------------
@st.cache_data
def load_pokemon_data():
    return pd.read_csv("pokemon.csv")

@st.cache_data
def load_battle_features():
    df = pd.read_csv("pokemon_battles_features.csv")
    if "Win_Probability" in df.columns:
        df = df.drop(columns=["Win_Probability"])
    return df

# ------------------------------------------
# ‡∏î‡∏∂‡∏á URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Pok√©API
# ------------------------------------------
def get_pokemon_image_url(pokemon_name):
    url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_name.lower()}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()['sprites']['front_default']
    return None

# ------------------------------------------
# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå pokemon_battles_features.csv
# ------------------------------------------
@st.cache_data
def prepare_training_data():
    battle_df = load_battle_features()
    # Numeric features: Total_p1, Speed_p1, Total_p2, Speed_p2
    numeric_features = battle_df[["Total_p1", "Speed_p1", "Total_p2", "Speed_p2"]].values
    # Categorical features: Type1_p1, Type2_p1, Type1_p2, Type2_p2
    categorical_cols = ["Type1_p1", "Type2_p1", "Type1_p2", "Type2_p2"]
    cat_data = battle_df[categorical_cols].fillna("Unknown").astype(str)
    encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)
    cat_features = encoder.fit_transform(cat_data)
    X = np.hstack((numeric_features, cat_features))
    y = battle_df["Winner"].values.astype(np.float32)
    return X, y, encoder

# ------------------------------------------
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network
# ------------------------------------------
def build_model(input_shape):
    model = Sequential([
        Input(shape=(input_shape,)),
        Dense(128, activation="relu"),
        Dense(64, activation="relu"),
        Dense(32, activation="relu"),
        Dense(1, activation="sigmoid")
    ])
    model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])
    return model

# ------------------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Train Model")
# ------------------------------------------
def train_model():
    X, y, enc = prepare_training_data()
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)
    mdl = build_model(X_train.shape[1])
    mdl.fit(X_train, y_train, epochs=10, batch_size=64, validation_data=(X_test, y_test), verbose=1)
    loss, acc = mdl.evaluate(X_test, y_test)
    st.write(f"üéØ Model Accuracy: {acc:.2%}")
    st.write(f"üéØ Model Loss: {loss:.4f}")
    return mdl, scaler, enc, acc, loss

# ------------------------------------------
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô session_state
# ------------------------------------------
if "model_trained" not in st.session_state:
    st.session_state.model_trained = False

if "model_obj" not in st.session_state:
    st.session_state.model_obj = None
if "scaler_obj" not in st.session_state:
    st.session_state.scaler_obj = None
if "encoder_obj" not in st.session_state:
    st.session_state.encoder_obj = None
if "model_accuracy" not in st.session_state:
    st.session_state.model_accuracy = None
if "model_loss" not in st.session_state:
    st.session_state.model_loss = None

# ------------------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á UI ‡∏î‡πâ‡∏ß‡∏¢ Streamlit
# ------------------------------------------
def predict_battle(pokemon1, pokemon2, encoder, model, scaler):
    progress_bar = st.progress(0)
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Pok√©mon ‡∏à‡∏≤‡∏Å pokemon_data
    pokemon_data = load_pokemon_data()
    p1 = pokemon_data[pokemon_data['Name'] == pokemon1].iloc[0]
    p2 = pokemon_data[pokemon_data['Name'] == pokemon2].iloc[0]
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç: Total ‡πÅ‡∏•‡∏∞ Speed ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    numeric_features = np.array([[p1['Total'], p1['Speed'], p2['Total'], p2['Speed']]])
    cat_input = [[p1['Type 1'], p1['Type 2'], p2['Type 1'], p2['Type 2']]]
    cat_features = encoder.transform(cat_input)
    features = np.hstack((numeric_features, cat_features))
    progress_bar.progress(50)
    features = scaler.transform(features)
    progress_bar.progress(75)
    prediction = model.predict(features)[0][0]
    progress_bar.progress(100)
    return pokemon1 if prediction > 0.5 else pokemon2

def predict_pokemon():
    st.title("Pokemon Battle Predictor ‚öîÔ∏è")
    pokemon_data = load_pokemon_data()
    pokemon_list = pokemon_data['Name'].unique()
    # ‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤ Mega
    pokemon_list = [p for p in pokemon_list if 'Mega' not in p]
    pokemon1 = st.selectbox("Select Pokemon 1", pokemon_list)
    pokemon2 = st.selectbox("Select Pokemon 2", pokemon_list)
    
    col1, col2 = st.columns(2)
    st.subheader("üéÆ Battle Prediction")
    
    with col1:
        img_url1 = get_pokemon_image_url(pokemon1)
        if img_url1:
            st.image(img_url1, caption=f"{pokemon1} Image", use_container_width=True)
        st.write(f"**{pokemon1}** Stats:")
        p1_data = pokemon_data[pokemon_data['Name'] == pokemon1].iloc[0]
        for stat in ['Type 1', 'Type 2', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Total']:
            st.write(f"{stat}: {p1_data[stat]}")
    
    with col2:
        img_url2 = get_pokemon_image_url(pokemon2)
        if img_url2:
            st.image(img_url2, caption=f"{pokemon2} Image", use_container_width=True)
        st.write(f"**{pokemon2}** Stats:")
        p2_data = pokemon_data[pokemon_data['Name'] == pokemon2].iloc[0]
        for stat in ['Type 1', 'Type 2', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Total']:
            st.write(f"{stat}: {p2_data[stat]}")
    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Train Model
    if not st.session_state.model_trained:
        if st.button("Start Battle"):
            with st.spinner("Training model..."):
                mdl, scl, enc, acc, loss = train_model()
                st.session_state.model_obj = mdl
                st.session_state.scaler_obj = scl
                st.session_state.encoder_obj = enc
                st.session_state.model_accuracy = acc
                st.session_state.model_loss = loss
                st.session_state.model_trained = True
                st.success("Model training completed!")
    else:
        st.write("Model already trained.")
    
    # ‡∏ñ‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ñ‡∏π‡∏Å‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Start Battle
    if st.session_state.model_trained:
        winner = predict_battle(pokemon1, pokemon2, st.session_state.encoder_obj, st.session_state.model_obj, st.session_state.scaler_obj)
        st.subheader(f"üèÜ Winner: {winner}")
    
    st.subheader("Model Performance")
    if st.session_state.model_trained:
        st.write(f"üéØ Model Accuracy: {st.session_state.model_accuracy:.2%}")
        st.write(f"üéØ Model Loss: {st.session_state.model_loss:.4f}")
    else:
        st.write("Model not trained yet.")

        

def main():
    tf.compat.v1.enable_eager_execution()
    page = st.sidebar.selectbox("Select a page", ["About Vgsales", "Vgsales", "About Pokemon", "Predic Battle"])
    if page == "About Vgsales":
        home()
    elif page == "Vgsales":
        vgsales()
    elif page == "About Pokemon":
        pokedex()
    elif page == "Predic Battle":
        predict_pokemon()

if __name__ == "__main__":
    main()





    
